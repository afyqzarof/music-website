/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 sunflower2.glb -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Circle: THREE.Mesh;
    Circle_1: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "CircleAction";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/sunflower2.glb",
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  useFrame(() => {
    if (!group.current) {
      return;
    }

    group.current.rotation.y += 0.012;
  });
  return (
    <group ref={group} {...props} dispose={null} position={[0, 1, 0]}>
      <group name="Scene">
        <group name="black_core" rotation={[0, 0, 1.57]}>
          <mesh
            name="Circle"
            geometry={nodes.Circle.geometry}
            material={materials["Material.001"]}
          />
          <mesh
            name="Circle_1"
            geometry={nodes.Circle_1.geometry}
            material={materials["Material.002"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/sunflower2.glb");
